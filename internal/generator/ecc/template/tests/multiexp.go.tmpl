{{ $G1TAffine := print (toUpper .G1.PointName) "Affine" }}
{{ $G1TJacobian := print (toUpper .G1.PointName) "Jac" }}
{{ $G1TJacobianExtended := print (toLower .G1.PointName) "JacExtended" }}

{{ $G2TAffine := print (toUpper .G2.PointName) "Affine" }}
{{ $G2TJacobian := print (toUpper .G2.PointName) "Jac" }}
{{ $G2TJacobianExtended := print (toLower .G2.PointName) "JacExtended" }}


import (
	"fmt"
	"math/big"
	"testing"
    "runtime"
    "math/bits"
	"sync"
	
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fr"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/prop"
)


{{template "multiexp" dict "PointName" .G1.PointName "TAffine" $G1TAffine "TJacobian" $G1TJacobian "TJacobianExtended" $G1TJacobianExtended "FrNbWords" .Fr.NbWords "CRange" .G1.CRange}}
{{template "multiexp" dict "PointName" .G2.PointName "TAffine" $G2TAffine "TJacobian" $G2TJacobian "TJacobianExtended" $G2TJacobianExtended "FrNbWords" .Fr.NbWords "CRange" .G2.CRange}}

{{define "multiexp" }}

func TestMultiExp{{toUpper $.PointName}}(t *testing.T) {

	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 2

	properties := gopter.NewProperties(parameters)

	genScalar := GenFr()
	
	// size of the multiExps 
	const nbSamples = 143

	// multi exp points
	var samplePoints [nbSamples]{{ $.TAffine }}
	var g {{ $.TJacobian }}
	g.Set(&{{ toLower $.PointName }}Gen)
	for i := 1; i <= nbSamples; i++ {
		samplePoints[i-1].FromJacobian(&g)
		g.AddAssign(&{{ toLower $.PointName }}Gen)
	}

	// final scalar to use in double and add method (without mixer factor)
	// n(n+1)(2n+1)/6  (sum of the squares from 1 to n)
	var scalar big.Int
	scalar.SetInt64(nbSamples)
	scalar.Mul(&scalar, new(big.Int).SetInt64(nbSamples+1))
	scalar.Mul(&scalar, new(big.Int).SetInt64(2*nbSamples+1))
	scalar.Div(&scalar, new(big.Int).SetInt64(6))


	// ensure a multiexp that's splitted has the same result as a non-splitted one..
	properties.Property("[{{ toUpper $.PointName }}] Multi exponentation (c=16) should be consistant with splitted multiexp", prop.ForAll(
		func(mixer fr.Element) bool {
			var samplePointsLarge [nbSamples*13]{{ $.TAffine }}
			for i:=0; i<13; i++ {
				copy(samplePointsLarge[i*nbSamples:], samplePoints[:])
			}

			var r16, splitted1, splitted2 {{ $.TJacobian }}
			
			// mixer ensures that all the words of a fpElement are set
			var sampleScalars [nbSamples*13]fr.Element
	
			for i := 1; i <= nbSamples; i++ {
				sampleScalars[i-1].SetUint64(uint64(i)).
					Mul(&sampleScalars[i-1], &mixer).
					FromMont()
			}

			scalars16 := partitionScalars(sampleScalars[:], 16, false, runtime.NumCPU())
			r16.msmC16(samplePoints[:], scalars16, runtime.NumCPU())

			splitted1.MultiExp(samplePointsLarge[:], sampleScalars[:], ecc.MultiExpConfig{NbTasks: 128})
			splitted2.MultiExp(samplePointsLarge[:], sampleScalars[:], ecc.MultiExpConfig{NbTasks: 51})
			return r16.Equal(&splitted1) && r16.Equal(&splitted2)
		},
		genScalar,
	))



	if testing.Short() {
		// we test only c = 5 and c = 16

		properties.Property("[{{ toUpper $.PointName }}] Multi exponentation (c=5, c=16) should be consistant with sum of square", prop.ForAll(
			func(mixer fr.Element) bool {
		
				var expected {{ $.TJacobian }}
				
				// compute expected result with double and add
				var finalScalar,mixerBigInt big.Int
				finalScalar.Mul(&scalar, mixer.ToBigIntRegular(&mixerBigInt))
				expected.ScalarMultiplication(&{{ toLower $.PointName }}Gen, &finalScalar)

				// mixer ensures that all the words of a fpElement are set
				var sampleScalars [nbSamples]fr.Element
		
				for i := 1; i <= nbSamples; i++ {
					sampleScalars[i-1].SetUint64(uint64(i)).
						Mul(&sampleScalars[i-1], &mixer).
						FromMont()
				}

				scalars5 := partitionScalars(sampleScalars[:], 5, false, runtime.NumCPU())
				scalars16 := partitionScalars(sampleScalars[:], 16, false, runtime.NumCPU())

				
				nbTasks := []int{1,2,3, runtime.NumCPU()} 
				
				// we can have less tasks than chunks
				// in which case each task may process multiple chunks
				for i:=0; i < len(nbTasks);i ++ {
					var r5, r16 {{ $.TJacobian }}
					r5.msmC5(samplePoints[:], scalars5, nbTasks[i])
					r16.msmC16(samplePoints[:], scalars16, nbTasks[i])
					if !(r5.Equal(&expected) && r16.Equal(&expected)) {
						return false 
					}
				}
		
				return true
			},
			genScalar,
		))
	} else {
	{{range $c :=  $.CRange}}
	
	properties.Property("[{{ toUpper $.PointName }}] Multi exponentation (c={{$c}}) should be consistant with sum of square", prop.ForAll(
		func(mixer fr.Element) bool {
	
			var result, expected {{ $.TJacobian }}
	
	
			// mixer ensures that all the words of a fpElement are set
			var sampleScalars [nbSamples]fr.Element
	
			for i := 1; i <= nbSamples; i++ {
				sampleScalars[i-1].SetUint64(uint64(i)).
					Mul(&sampleScalars[i-1], &mixer).
					FromMont()
			}

			scalars := partitionScalars(sampleScalars[:], {{$c}}, false, runtime.NumCPU())
			result.msmC{{$c}}(samplePoints[:], scalars, runtime.NumCPU())
	
	
			// compute expected result with double and add
			var finalScalar,mixerBigInt big.Int
			finalScalar.Mul(&scalar, mixer.ToBigIntRegular(&mixerBigInt))
			expected.ScalarMultiplication(&{{ toLower $.PointName }}Gen, &finalScalar)
	
			return result.Equal(&expected)
		},
		genScalar,
	))

	{{end}}
	}


	// note : this test is here as we expect to have a different multiExp than the above bucket method
	// for small number of points
	properties.Property("[{{ toUpper $.PointName }}] Multi exponentation (<50points) should be consistant with sum of square", prop.ForAll(
		func(mixer fr.Element) bool {

			var g {{ $.TJacobian }}
			g.Set(&{{ toLower .PointName}}Gen)

			// mixer ensures that all the words of a fpElement are set
			samplePoints := make([]{{ $.TAffine }}, 30)
			sampleScalars := make([]fr.Element, 30)

			for i := 1; i <= 30; i++ {
				sampleScalars[i-1].SetUint64(uint64(i)).
					Mul(&sampleScalars[i-1], &mixer).
					FromMont()
				samplePoints[i-1].FromJacobian(&g)
				g.AddAssign(&{{ toLower .PointName}}Gen)
			}

			var op1MultiExp {{ $.TAffine }}
			op1MultiExp.MultiExp(samplePoints, sampleScalars, ecc.MultiExpConfig{})

			var finalBigScalar fr.Element
			var finalBigScalarBi big.Int
			var op1ScalarMul {{ $.TAffine }}
			finalBigScalar.SetString("9455").Mul(&finalBigScalar, &mixer)
			finalBigScalar.ToBigIntRegular(&finalBigScalarBi)
			op1ScalarMul.ScalarMultiplication(&{{ toLower .PointName}}GenAff, &finalBigScalarBi)

			return op1ScalarMul.Equal(&op1MultiExp)
		},
		genScalar,
	))


	properties.TestingRun(t, gopter.ConsoleReporter(false))
}




func BenchmarkMultiExp{{ toUpper $.PointName }}(b *testing.B) {
	// ensure every words of the scalars are filled
	var mixer fr.Element
	mixer.SetString("7716837800905789770901243404444209691916730933998574719964609384059111546487")

	const pow = (bits.UintSize / 2 ) - (bits.UintSize / 8) // 24 on 64 bits arch, 12 on 32 bits 
	const nbSamples = 1 << pow

	var samplePoints [nbSamples]{{ $.TAffine }}
	var sampleScalars [nbSamples]fr.Element

	for i := 1; i <= nbSamples; i++ {
		sampleScalars[i-1].SetUint64(uint64(i)).
			Mul(&sampleScalars[i-1], &mixer).
			FromMont()
		samplePoints[i-1] = {{ toLower .PointName}}GenAff
	}

	var testPoint {{ $.TAffine }}

	for i := 5; i <= pow; i++ {
		using := 1 << i

		b.Run(fmt.Sprintf("%d points", using), func(b *testing.B) {
			b.ResetTimer()
			for j := 0; j < b.N; j++ {
				testPoint.MultiExp(samplePoints[:using], sampleScalars[:using],ecc.MultiExpConfig{})
			}
		})
	}
}


func BenchmarkMultiExp{{ toUpper $.PointName }}Reference(b *testing.B) {
	// ensure every words of the scalars are filled
	var mixer fr.Element
	mixer.SetString("7716837800905789770901243404444209691916730933998574719964609384059111546487")

	const nbSamples = 1 << 20

	var samplePoints [nbSamples]{{ $.TAffine }}
	var sampleScalars [nbSamples]fr.Element

	for i := 1; i <= nbSamples; i++ {
		sampleScalars[i-1].SetUint64(uint64(i)).
			Mul(&sampleScalars[i-1], &mixer).
			FromMont()
		samplePoints[i-1] = {{ toLower .PointName}}GenAff
	}

	var testPoint {{ $.TAffine }}

	b.ResetTimer()
	for j := 0; j < b.N; j++ {
		testPoint.MultiExp(samplePoints[:], sampleScalars[:],ecc.MultiExpConfig{})
	}
}


func BenchmarkManyMultiExp{{ toUpper $.PointName }}Reference(b *testing.B) {
	// ensure every words of the scalars are filled
	var mixer fr.Element
	mixer.SetString("7716837800905789770901243404444209691916730933998574719964609384059111546487")

	const nbSamples = 1 << 20

	var samplePoints [nbSamples]{{ $.TAffine }}
	var sampleScalars [nbSamples]fr.Element

	for i := 1; i <= nbSamples; i++ {
		sampleScalars[i-1].SetUint64(uint64(i)).
			Mul(&sampleScalars[i-1], &mixer).
			FromMont()
		samplePoints[i-1] = {{ toLower .PointName}}GenAff
	}

	var t1, t2, t3 {{ $.TAffine }}
	b.ResetTimer()
	for j := 0; j < b.N; j++ {
		var wg sync.WaitGroup
		wg.Add(3)
		go func() {
			t1.MultiExp(samplePoints[:], sampleScalars[:],ecc.MultiExpConfig{})
			wg.Done()
		}()
		go func() {
			t2.MultiExp(samplePoints[:], sampleScalars[:],ecc.MultiExpConfig{})
			wg.Done()
		}()
		go func() {
			t3.MultiExp(samplePoints[:], sampleScalars[:],ecc.MultiExpConfig{})
			wg.Done()
		}()
		wg.Wait()
	}
}

{{end }}