{{$isogenyNeeded := notNil .Isogeny}}
{{$CoordType := .Point.CoordType}}
{{$CurveName := .Point.PointName}}
{{$CurveTitle := toTitle $CurveName}}
{{$TowerDegree := .Field.Degree}}
{{$AffineType := print $CurveTitle "Affine"}}
{{$JacType := print $CurveTitle "Jac"}}

//Note: This only works for simple extensions

import (
    "math/big"
    "github.com/consensys/gnark-crypto/ecc/{{.Name}}/fp"

	{{ $package := "fp"}}
	{{- if not (eq $TowerDegree 1) }}
	    {{ $package = "fptower" }}
        "github.com/consensys/gnark-crypto/ecc/{{.Name}}/internal/fptower"
	{{- end}}
)

{{ define "asElement" }} {{ if eq $.TowerDegree 1}}{ {{ words64 (index $.c 0) }} }{{ else }}{ {{ range $i := (interval 0 (len $.c))}}
    {{if eq $.TowerDegree 2}}A{{end}}{{$i}}: fp.Element{ {{ words64 (index $.c $i) }} },{{ end }}
}{{ end }}{{- end }}

{{ if $isogenyNeeded }}

func {{$CurveName}}IsogenyXNumerator(dst *{{$CoordType}}, x *{{$CoordType}}) {
    {{$CurveName}}EvalPolynomial(dst,
        false,
        []{{$CoordType}} {
            {{- range $c := .Isogeny.XMap.Num}}
            {{ template "asElement" dict "c" $c "TowerDegree" $TowerDegree}},
            {{- end}}
        },
        x)
}

func {{$CurveName}}IsogenyXDenominator(dst *{{$CoordType}}, x *{{$CoordType}}) {
    {{$CurveName}}EvalPolynomial(dst,
        true,
        []{{$CoordType}} {
            {{- range $c := .Isogeny.XMap.Den}}
                {{ template "asElement" dict "c" $c "TowerDegree" $TowerDegree }},
            {{- end}}
        },
        x)
}

func {{$CurveName}}IsogenyYNumerator(dst *{{$CoordType}}, x *{{$CoordType}}, y *{{$CoordType}}) {
    var _dst {{$CoordType}}
    {{$CurveName}}EvalPolynomial(&_dst,
        false,
        []{{$CoordType}} {
            {{- range $c := .Isogeny.YMap.Num}}
                {{ template "asElement" dict "c" $c "TowerDegree" $TowerDegree }},
            {{- end}}
        },
        x)

   dst.Mul(&_dst, y)
}

func {{$CurveName}}IsogenyYDenominator(dst *{{$CoordType}}, x *{{$CoordType}}) {
    {{$CurveName}}EvalPolynomial(dst,
        true,
        []{{$CoordType}} {
            {{- range $c := .Isogeny.YMap.Den}}
                {{ template "asElement" dict "c" $c "TowerDegree" $TowerDegree }},
            {{- end}}
        },
        x)
}

func {{$CurveName}}Isogeny(p *{{$AffineType}}) {

	den := make([]{{$CoordType}}, 2)

    {{$CurveName}}IsogenyYDenominator(&den[1], &p.X)
    {{$CurveName}}IsogenyXDenominator(&den[0], &p.X)

    {{$CurveName}}IsogenyYNumerator(&p.Y, &p.X, &p.Y)
    {{$CurveName}}IsogenyXNumerator(&p.X, &p.X)

	den = {{$package}}.BatchInvert(den)

	p.X.Mul(&p.X, &den[0])
	p.Y.Mul(&p.Y, &den[1])
}

{{ end }}

{{ $cInts := index .SqrtRatioParams 0 }}

{{ $c1Int := index $cInts 0}}
{{ $c1IntBytes := printList (bytes $c1Int ) }}

// {{$CurveName}}SqrtRatio computes the square root of u/v and returns 0 iff u/v was indeed a quadratic residue
// if not, we get sqrt(Z * u / v). Recall that Z is non-residue
// The main idea is that since the computation of the square root involves taking large powers of u/v, the inversion of v can be avoided
func {{$CurveName}}SqrtRatio(z *{{$CoordType}}, u *{{$CoordType}}, v *{{$CoordType}}) uint64 {
{{ if eq (mod .FieldSizeMod256 4) 3 }} // Taken from https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/13/ F.2.1.2. q = 3 mod 4
	var tv1 {{$CoordType}}
	tv1.Square(v)
	var tv2 {{$CoordType}}
	tv2.Mul(u, v)
	tv1.Mul(&tv1, &tv2)

	var y1 {{$CoordType}}
	{
	var c1 big.Int
	// c1 = {{ $c1Int }}
	c1.SetBytes([]byte{ {{ $c1IntBytes }} })
	y1.Exp(tv1, &c1)
	}

	y1.Mul(&y1, &tv2)

	var y2 {{$CoordType}}
	y2.Mul(&y1, &{{$CoordType}} {{ template "asElement" dict "c" (index .SqrtRatioParams 1)  "TowerDegree" $TowerDegree}})

	var tv3 {{$CoordType}}
	tv3.Square(&y1)
	tv3.Mul(&tv3, v)

    isQNr := tv3.NotEqual(u)
    z.Select(int(isQNr), &y1, &y2)
    return isQNr
}

{{ end }}

{{ if eq (mod .FieldSizeMod256 8) 5 }} // Taken from https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/13/ F.2.1.3. q = 5 mod 8
// TODO: Test correct use of Element.Select

    var tv1, tv2 {{$CoordType}}
    tv1.Square(v)
    tv2.Mul(&tv1, v)
    tv1.Square(&tv1)
    tv2.Mul(&tv2, u)
    tv1.Mul(&tv1, &tv2)

    var c1 big.Int
	// c1 = {{ $c1Int }}
    c1.SetBytes([]byte { {{ $c1IntBytes }} })
    var y1 {{$CoordType}}
    y1.Exp(tv1, &c1)
    y1.Mul(&y1, &tv2)
    tv1.Mul(&y1, &{{$CoordType}} {{template "asElement" dict "c" (index .SqrtRatioParams 1) "TowerDegree" $TowerDegree}} )
    tv2.Square(&tv1)

    //Line 10 in std doc
    tv2.Mul(&tv2, v)

	y1.Select(int(tv2.NotEqual(u)), &tv1, &y1)

    tv2.Square(&y1)
    tv2.Mul(&tv2, v)

    //Line 15
    isQNr := tv2.NotEqual(u)
    var y2 {{$CoordType}}
    y2.Mul(&y1, &{{$CoordType}} {{template "asElement" dict "c" (index .SqrtRatioParams 2) "TowerDegree" $TowerDegree}} )
    tv1.Mul(&y2, &{{$CoordType}} {{template "asElement" dict "c" (index .SqrtRatioParams 1) "TowerDegree" $TowerDegree}})
    tv2.Square(&tv1)
    tv2.Mul(&tv2, v)

    var tv3 {{$CoordType}}
    //Line 20
    // Z = {{.Z}}
    {{$CurveName}}MulByZ(&tv3, u)

	y2.Select(int(tv2.NotEqual(&tv3)), &tv1, &y2)

	z.Select(int(isQNr), &y1, &y2)
    return isQNr
}

{{ end }}

{{ if eq (mod .FieldSizeMod256 8) 1 }}// Taken from https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/13/ F.2.1.1. for any field

{{ $c2Int := index $cInts 1}}
{{ $c2IntBytes := printList (bytes $c2Int ) }}

{{ $c3Int := index $cInts 2}}
{{ $c3IntBytes := printList (bytes $c3Int ) }}

{{ $c4Int := index $cInts 3}}
{{ $c4IntBytes := printList (bytes $c4Int ) }}

{{ $c5Int := index $cInts 4}}
{{ $c5IntBytes := printList (bytes $c5Int ) }}

   tv1 := {{$CoordType}} {{template "asElement" dict "c" (index .SqrtRatioParams 1) "TowerDegree" $TowerDegree }}    //tv1 = c6

    var tv2, tv3, tv4, tv5 {{$CoordType}}
   var exp big.Int
   // c4 = {{ $c4Int }} = 2^{{$c1Int}} - 1
   // q is odd so c1 is at least 1.
   exp.SetBytes([]byte { {{ $c4IntBytes }} })

   tv2.Exp(*v, &exp)
   tv3.Mul(&tv2, &tv2)
   tv3.Mul(&tv3, v)

   // line 5
   tv5.Mul(u, &tv3)

// c3 = {{ $c3Int }}
   exp.SetBytes([]byte { {{ $c3IntBytes }} })
   tv5.Exp(tv5, &exp)
   tv5.Mul(&tv5, &tv2)
   tv2.Mul(&tv5, v)
   tv3.Mul(&tv5, u)

   // line 10
   tv4.Mul(&tv3, &tv2)

// c5 = {{ $c5Int }}
   exp.SetBytes([]byte { {{ $c5IntBytes }} })
   tv5.Exp(tv4, &exp)

   isQNr := {{$CurveName}}NotOne(&tv5)

   tv2.Mul(&tv3, &{{$CoordType}} {{template "asElement" dict "c" (index .SqrtRatioParams 2) "TowerDegree" $TowerDegree}} )
   tv5.Mul(&tv4, &tv1)

   // line 15

   tv3.Select(int(isQNr), &tv3, &tv2)
   tv4.Select(int(isQNr), &tv4, &tv5)

   exp.Lsh( big.NewInt(1), {{ $c1Int }} - 2)

   for i := {{ $c1Int }}; i >= 2; i -- {
      //line 20
      tv5.Exp(tv4, &exp)
      nE1 := {{$CurveName}}NotOne(&tv5)

      tv2.Mul(&tv3, &tv1)
      tv1.Mul(&tv1, &tv1)
      tv5.Mul(&tv4, &tv1)

	  tv3.Select(int(nE1), &tv3, &tv2)
	  tv4.Select(int(nE1), &tv4, &tv5)

      exp.Rsh(&exp,1)
   }

   *z = tv3
   return isQNr
}
{{ end }}

/*
// {{$CurveName}}SetZ sets z to {{.Z}}.
func {{$CurveName}}SetZ(z *{{$CoordType}}) {
    z.Set( &{{$CoordType}} {{template "asElement" dict "c" .ZMont "TowerDegree" $TowerDegree}} )
}*/

// {{$CurveName}}MulByZ multiplies x by {{.Z}} and stores the result in z
func {{$CurveName}}MulByZ(z *{{$CoordType}}, x *{{$CoordType}}) {

{{ if eq $TowerDegree 1 }}

    {{ $Z := index .Z 0}}

    {{ $ZBitsHi2Lo := reverse (bits $Z) }}
    {{ $op := "Add"}}
    {{ if lt $Z 0 }}
        {{ $op = "Sub" }}
        var res {{$CoordType}}
        res.Neg(x)
    {{ end }}
    {{ if gt $Z 0 }}
        res := *x
    {{ end }}

	{{if ge (len $ZBitsHi2Lo) 2 }}
        res.Double(&res)

        {{- range $bit := noFirst (noLast $ZBitsHi2Lo) }}
            {{ if $bit }}
                res.{{$op}}(&res, x)
            {{ end }}
			res.Double(&res)
        {{- end }}

        {{ if last $ZBitsHi2Lo }}
            res.{{$op}}(&res, x)
        {{ end }}

	{{end}}

    *z = res {{ else }}
    z.Mul(x, &{{$CoordType}} {{template "asElement" dict "c" .ZMont "TowerDegree" $TowerDegree}})

{{ end }}}

// From https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/13/ Pg 80
func {{$CurveName}}SswuMap(u *{{$CoordType}}) {{$AffineType}} {

	var tv1 {{$CoordType}}
	tv1.Square(u)

	//mul tv1 by Z
    {{$CurveName}}MulByZ(&tv1, &tv1)

	var tv2 {{$CoordType}}
	tv2.Square(&tv1)
	tv2.Add(&tv2, &tv1)

	var tv3 {{$CoordType}}
	//Standard doc line 5
	var tv4 {{$CoordType}}
	tv4.SetOne()
	tv3.Add(&tv2, &tv4)
	tv3.Mul(&tv3, &{{$CoordType}}{{ template "asElement" dict "c" .B  "TowerDegree" $TowerDegree}})

    tv2NZero := {{$CurveName}}NotZero(&tv2)

	// tv4 = Z
	tv4 = {{$CoordType}}{{ template "asElement" dict "c" .ZMont "TowerDegree" $TowerDegree}}

    tv2.Neg(&tv2)
    tv4.Select(int(tv2NZero), &tv4, &tv2)
    tv2 = {{$CoordType}}{{ template "asElement" dict "c" .A  "TowerDegree" $TowerDegree}}
    tv4.Mul(&tv4, &tv2)

	tv2.Square(&tv3)

	var tv6 {{$CoordType}}
	//Standard doc line 10
	tv6.Square(&tv4)

	var tv5 {{$CoordType}}
	tv5.Mul(&tv6, &{{$CoordType}}{{ template "asElement" dict "c" .A  "TowerDegree" $TowerDegree}})

	tv2.Add(&tv2, &tv5)
	tv2.Mul(&tv2, &tv3)
	tv6.Mul(&tv6, &tv4)

	//Standards doc line 15
	tv5.Mul(&tv6, &{{$CoordType}}{{ template "asElement" dict "c" .B  "TowerDegree" $TowerDegree}})
	tv2.Add(&tv2, &tv5)

	var x {{$CoordType}}
	x.Mul(&tv1, &tv3)

	var y1 {{$CoordType}}
	gx1NSquare := {{$CurveName}}SqrtRatio(&y1, &tv2, &tv6)

	var y {{$CoordType}}
	y.Mul(&tv1, u)

	//Standards doc line 20
	y.Mul(&y, &y1)

    x.Select(int(gx1NSquare), &tv3, &x)
    y.Select(int(gx1NSquare), &y1, &y)

    y1.Neg(&y)
    y.Select(int({{$CurveName}}Sgn0(u)^{{$CurveName}}Sgn0(&y)), &y, &y1)

	//Standards doc line 25
	x.Div(&x, &tv4)

	return {{$AffineType}}{x, y}
}

// EncodeToCurve{{$CurveTitle}}SSWU maps a {{$CoordType}} to a point on the curve using the Simplified Shallue and van de Woestijne Ulas map
//https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/13/#section-6.6.3
func EncodeToCurve{{$CurveTitle}}SSWU(msg, dst []byte) ({{$AffineType}}, error) {

	var res {{$AffineType}}
	u, err := hashToFp(msg, dst, {{$TowerDegree}})
	if err != nil {
		return res, err
	}

    {{if eq $TowerDegree 1}}
    res = {{$CurveName}}SswuMap(&u[0])
    {{else}}
    res = {{$CurveName}}SswuMap( &{{$CoordType}} {
        {{range $i := interval 0 $TowerDegree }} {{if eq $TowerDegree 2}}A{{end}}{{$i}}: u[{{$i}}],
    {{end}} })
    {{end}}

{{ if $isogenyNeeded }}
	//this is in an isogenous curve
    {{$CurveName}}Isogeny(&res)
{{ end }}
 	{{ if .Point.CofactorCleaning}}
 	    res.ClearCofactor(&res)
 	{{ end }}
 	return res, nil
}

// HashToCurve{{$CurveTitle}}SSWU hashes a byte string to the {{$CurveTitle}} curve. Usable as a random oracle.
// https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-06#section-3
func HashToCurve{{$CurveTitle}}SSWU(msg, dst []byte) ({{$AffineType}}, error) {
	u, err := hashToFp(msg, dst, 2 * {{$TowerDegree}})
	if err != nil {
		return {{$AffineType}}{}, err
	}

	{{if eq $TowerDegree 1}}
	Q0 := {{$CurveName}}SswuMap(&u[0])
	Q1 := {{$CurveName}}SswuMap(&u[1])
	{{else}}
	Q0 := {{$CurveName}}SswuMap( &{{$CoordType}} {
		{{range $i := interval 0 $TowerDegree }} {{if eq $TowerDegree 2}}A{{end}}{{$i}}: u[{{$i}}],
		{{end}} })
	Q1 := {{$CurveName}}SswuMap( &{{$CoordType}} {
        {{range $i := interval 0 $TowerDegree }} {{if eq $TowerDegree 2}}A{{end}}{{$i}}: u[{{$TowerDegree}} + {{$i}}],
        {{end}} })
	{{end}}

{{ if $isogenyNeeded }}
	//TODO: Add in E' first, then apply isogeny
    {{$CurveName}}Isogeny(&Q0)
    {{$CurveName}}Isogeny(&Q1)
{{ end }}

	var _Q0, _Q1 {{$JacType}}
	_Q0.FromAffine(&Q0)
	_Q1.FromAffine(&Q1).AddAssign(&_Q0)
	{{ if .Point.CofactorCleaning}}
	    _Q1.ClearCofactor(&_Q1)
	{{ end }}

    Q1.FromJacobian(&_Q1)
    return Q1, nil
}

// {{$CurveName}}Sgn0 is an algebraic substitute for the notion of sign in ordered fields
// Namely, every non-zero quadratic residue in a finite field of characteristic =/= 2 has exactly two square roots, one of each sign
// Taken from https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/ section 4.1
// The sign of an element is not obviously related to that of its Montgomery form
func {{$CurveName}}Sgn0(z *{{$CoordType}}) uint64 {

    nonMont := *z
    nonMont.FromMont()
	{{if eq $TowerDegree 1}}
        return nonMont[0]%2
	{{else}}
        sign := uint64(0)
        zero := uint64(1)
        var signI uint64
        var zeroI uint64
        {{range $i := interval 0 $TowerDegree}}
            signI = nonMont.{{$.FieldCoordName}}{{$i}}[0] % 2
            sign = sign | (zero & signI)
			{{if not (eq $i (sub $TowerDegree 1))}}
                zeroI = g1NotZero(&nonMont.{{$.FieldCoordName}}{{$i}})
                zeroI = 1 ^ (zeroI|-zeroI)>>63
                zero = zero & zeroI
            {{end}}
        {{end}}
        return sign
    {{end}}
}

func {{$CurveName}}EvalPolynomial(z *{{$CoordType}}, monic bool, coefficients []{{$CoordType}}, x *{{$CoordType}}) {
    dst := coefficients[len(coefficients) - 1]

    if monic {
        dst.Add(&dst, x)
    }

    for i := len(coefficients) - 2; i >= 0; i-- {
        dst.Mul(&dst, x)
        dst.Add(&dst, &coefficients[i])
    }

    z.Set(&dst)
}

func {{$CurveName}}NotZero(x *{{$CoordType}}) uint64 {
	{{if eq $TowerDegree 1}}
    return x[0] {{ range $i := $.Field.Base.NbWordsIndexesNoZero}} | x[{{$i}}] {{ end}}
	{{else}}    //Assuming G1 is over Fp and that if hashing is available for G2, it also is for G1
	return g1NotZero(&x.A0) {{ range $i := interval 1 $TowerDegree }} | g1NotZero(&x.A{{$i}}) {{end}}
	{{end}}
}

func {{$CurveName}}NotOne(x *{{$CoordType}}) uint64 {
    {{if eq $TowerDegree 1 }}
	    var one {{$CoordType}}
		return one.SetOne().NotEqual(x)
    {{else}}
        //Assuming hash is implemented for G1 and that the curve is over Fp
        return g1NotOne(&x.{{.FieldCoordName}}0) {{range $i := interval 1 $TowerDegree}} | g1NotZero(&x.{{$.FieldCoordName}}{{$i}}) {{end}}
    {{end}}
}