// Copyright 2020 ConsenSys AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cp8632

import (
	"math/big"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/cp8-632/fp"
	"github.com/consensys/gnark-crypto/ecc/cp8-632/internal/fptower"
)

// E: y**2=x**3-x
// Etwist: y**2=x**3-x/u
// Tower: Fp->Fp8 (w^2=2)
// Fp: p=16857842227199225999646786835636637546980511455593181936643515867446449681250963223102065881329922732942164707714798074010252040453159496268796306973476256192757039177873952554508334906059909 (632 bits)
// Fr: r=39705142709513438335025689890408969744933502416914749335064285505637884093126342347073617133569 (= Fp BLS12-315, 315 bits)

// ID CP8_632 ID
const ID = ecc.CP8_632

// aCurveCoeff a coeff of the curve
var aCurveCoeff fp.Element

// cofactor of the curve
var cofactor big.Int

// aTwistCurveCoeff b coeff of the twist (defined over Fp2) curve
var aTwistCurveCoeff fptower.E2

// cofactorTwist of the curve
var cofactorTwist big.Int

// generators of the r-torsion group, resp. in ker(pi-id), ker(Tr)
var g1Gen G1Jac
var g2Gen G2Jac

var g1GenAff G1Affine
var g2GenAff G2Affine

// point at infinity
var g1Infinity G1Jac
var g2Infinity G2Jac

// Miller loop counters
var loopCounterAte [318]int8

// finalExponentHardPart (p^4+1)/r
var finalExponentHardPart big.Int

// Endomorphism
var squareRootOneG1 fp.Element
var squareRootOneG2 fp.Element
var lambdaGLV big.Int

func init() {

	aCurveCoeff.SetUint64(1).Neg(&aCurveCoeff)
	aTwistCurveCoeff.A1.SetUint64(1)
	aTwistCurveCoeff.Inverse(&aTwistCurveCoeff).Neg(&aTwistCurveCoeff) // D-twist

	cofactor.SetString("424575787336486525919881433149779109065117535008715395416548814899802759612501346622389123445160", 10)
	cofactorTwist.SetString("7157431636407380950126640349841351740878278991117729287857214041004658272402879684508872603937823124718589641314727702909291567620337487154057402119860855486765390772491717966442838511543044147992594893712246699516873984803821277362429144406100389878217469407870650419787619681584093298", 10)

	// random, not deterministic
	g1Gen.X.SetString("16669241569793144689576358184015273697172473599133409527765597244456059063645632082294888602687297549313408226230020161845797893266328116331226196965713808831871989472075519327658967992069490")
	g1Gen.Y.SetString("1248052385589995465912547602370558205558212431448411201256289955347018540821720119347513967254758856831331395724637858977285509974129230385564546422828003505266952129796380389964953474092787")
	g1Gen.Z.SetString("1")

	// random, not deterministic
	g2Gen.X.SetString("10708366454258442053809556178456520022058532137629265912681601973490008444805677896432758225698214387794283259795448165864971299431707757028356010301789327191390103458962295229316806353034271",
		"4976271863514307138814221941038273741712581985191400311713459914473771952045026963157806234720998990763062844395193849687224483268285226314739518831300977357908229074184103580106357885832218")
	g2Gen.Y.SetString("10737910426567040985864054156931690533717863260583361546671400339259702819401985802754313616033349203454404367437535380290665805546897812253684463342599583568862811083536548541130660269436016",
		"15110346270733014741103259155342915648185858025157936345319956980825250274777660661788156690139864750808274026925107783605040873251189505811571881980977195056229434878463253702814463589671987")
	g2Gen.Z.SetString("1",
		"0")

	// t-1
	T, _ := new(big.Int).SetString("251497308259867432767799949991118686456168646429130960187838505994642418166925257433161739483869", 10)
	ecc.NafDecomposition(T, loopCounterAte[:])

	finalExponentHardPart.SetString("2034047911884070289888093099175280248260023751396057418971253804547835796731868850883817727707356660363449409235716880524764819830051346650878341192426757587415321634980114955817968860610569741306443988354679949142914915701821507506149485231929427710375489181860008473337901768859451374459280963268772333839325334234546822763984253309502713457814421335203283736328930987350453418466151613291682535813195053837897367592797272074498407366510962253683130540647043184773226093551404540761660975588796883198528762051968408758127696673267990110492393646282227143642531787684155726905855059239553519839130497714405457086786484015779958968097696268109573863111046476741110898", 10)

	squareRootOneG2.SetString("7222082210142983038543489141853290673369487607365755818699143171422934631093502000809863118284569724841820399334504849386714264968115151209051975759824872243113052514490696138982342231596835")
	squareRootOneG1.Neg(&squareRootOneG2)
	lambdaGLV.SetString("14265754707630841383590096931465005402246260064523506653409458152869013672931584279153351926943", 10)

	g1GenAff.FromJacobian(&g1Gen)
	g2GenAff.FromJacobian(&g2Gen)
	g1Infinity.X.SetOne()
	g1Infinity.Y.SetOne()
	g2Infinity.X.SetOne()
	g2Infinity.Y.SetOne()

}

// Generators return the generators of the r-torsion group, resp. in ker(pi-id), ker(Tr)
func Generators() (g1Jac G1Jac, g2Jac G2Jac, g1Aff G1Affine, g2Aff G2Affine) {
	g1Aff = g1GenAff
	g2Aff = g2GenAff
	g1Jac = g1Gen
	g2Jac = g2Gen
	return
}
